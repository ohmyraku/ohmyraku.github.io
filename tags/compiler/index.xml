<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compiler on 山川异域, 风月同天</title>
    <link>https://ohmyraku.github.io/tags/compiler/</link>
    <description>Recent content in compiler on 山川异域, 风月同天</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>ohmyraku@outlook.com (ohmyraku)</managingEditor>
    <webMaster>ohmyraku@outlook.com (ohmyraku)</webMaster>
    <lastBuildDate>Mon, 24 Feb 2020 12:54:52 +0800</lastBuildDate>
    
	<atom:link href="https://ohmyraku.github.io/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 Raku 写编译器</title>
      <link>https://ohmyraku.github.io/creating-a-compiler-with-raku/</link>
      <pubDate>Mon, 24 Feb 2020 12:54:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/creating-a-compiler-with-raku/</guid>
      <description>Table of Contents 1. 第一章 创建一个简单的解释器 1.1. Grammar 1.2. Actions 1.3. 模块   2. 第二章 解析数字 2.1. 查找数字 2.2. 获取值 2.3. 使用 AST 2.4. 最后的笔记   3. 第三章 创建计算器 3.1. 汇总 3.2. 过早的优化 3.3. 更多操作数 3.4. 多样性测试 3.5. 增加更多数学 3.6. 测试代码 3.7. 添加更多能量 3.8. 允许括号     1. 第一章 创建一个简单的解释器 这是使用 Raku 创建编译器的一章。
 让我们从一个简单的解释器程序开始研究 Raku 强大的 Grammar 和正则表达式，该程序可以解析并执行以下微型程序。 我将这种语言称为 Lingua。
 my x; x = 42; say x;   在理解此代码的含义时，您不会遇到任何问题，因为故意选择了类似于 Raku 本身的语法的语法，只是在变量名前没有任何符号。</description>
    </item>
    
  </channel>
</rss>