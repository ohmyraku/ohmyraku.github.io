<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compiler on 山川异域, 风月同天</title>
    <link>https://ohmyraku.github.io/tags/compiler/</link>
    <description>Recent content in compiler on 山川异域, 风月同天</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>ohmyraku@outlook.com (ohmyraku)</managingEditor>
    <webMaster>ohmyraku@outlook.com (ohmyraku)</webMaster>
    <lastBuildDate>Mon, 24 Feb 2020 12:54:52 +0800</lastBuildDate><atom:link href="https://ohmyraku.github.io/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Raku 写编译器</title>
      <link>https://ohmyraku.github.io/creating-a-compiler-with-raku/</link>
      <pubDate>Mon, 24 Feb 2020 12:54:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/creating-a-compiler-with-raku/</guid>
      <description>1. 第一章 创建一个简单的解释器 这是使用 Raku 创建编译器的一章。
 让我们从一个简单的解释器程序开始研究 Raku 强大的 grammar 和正则表达式，该程序可以解析并执行以下微型程序。 我将这种语言称为 Lingua。
 #!/usr/bin/env raku my x; x = 42; say x;   在理解此代码的含义时，你不会遇到任何问题，因为故意选择了类似于 Raku 本身的语法的语法，只是在变量名前没有任何符号。
 该程序声明一个名为 x 的变量，为其赋一个整数值，然后将该值打印到控制台。
 假设你将代码保存在文件 test.lng 中。 现在让我们使用 Raku 读取它。
 #!/usr/bin/env raku my $code = &amp;#39;test.lng&amp;#39;.IO.slurp(); say $code;   将此 Raku 程序保存在另一个文件 lingua.raku 中，然后运行它：
 $ raku lingua.raku   如果你安装了 Raku，则会打印出我们测试程序的内容。
 1.1. Grammar 现在是时候使用 Raku grammar 解析程序了。 从语法上讲，grammar 是类，但是它们使用正则表达式描述其方法的行为，这些方法又称为 rule 和 token。 第一个应用的 rule 通常称为 TOP; Raku 选择它为默认开始规则。 Grammar 用于解析某些文本，因此只需对已定义的 grammar 调用 parse 方法并将文本传递给它即可。 所有这些都在我们的第一个程序中得到了证明：</description>
    </item>
    
  </channel>
</rss>
