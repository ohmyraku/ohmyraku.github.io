<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raku on 山川异域, 风月同天</title>
    <link>https://ohmyraku.github.io/categories/raku/</link>
    <description>Recent content in raku on 山川异域, 风月同天</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>ohmyraku@outlook.com (ohmyraku)</managingEditor>
    <webMaster>ohmyraku@outlook.com (ohmyraku)</webMaster>
    <lastBuildDate>Fri, 16 Oct 2020 22:51:52 +0800</lastBuildDate><atom:link href="https://ohmyraku.github.io/categories/raku/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raku Recipes</title>
      <link>https://ohmyraku.github.io/raku-recipes/</link>
      <pubDate>Fri, 16 Oct 2020 22:51:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-recipes/</guid>
      <description>1. 在真实环境中使用 Raku 在解决任何问题之前，你需要准备好你的环境来编辑、测试和运行你的 Raku 程序。本章将对你将面临的问题提出解决方案。Raku 可以作为第一语言使用（事实上，我鼓励你这样看待它），但你也可以直接使用其他语言的概念。
 比方说，你喜欢烹饪，你决定创建一个应用程序，其中有你创建的食谱，以及其他来自内容提供商和广大公众的食谱。人们将能够看到、上传、评论和评价菜谱。后台将用 Raku 编写，因为这将使你能够利用它的所有功能。
 你将需要执行一系列与处理、处理、渲染有关的不同任务，并对这些文件进行各种操作。
 但在你做这些之前，你需要准备好你的工具。在本章中，你将立即开始做这些工作。
 1.1. 食谱 1-1. 准备好你的工具 1.1.1. 问题 你需要在 Raku 中创建一个程序、模块或脚本。
  1.1.2. 解决办法 安装 Rakudo Raku 和 Comma IDE 并开始使用它们。
  1.1.3. 它是如何工作的 Raku 是一种编译语言，它使用一个虚拟机来运行由编译器创建的字节码汇编。这类似于 Java 创建 .class 和 .jar 文件然后在 Java 虚拟机中运行的方式，或者 C# 创建在 CLR 中运行的程序集的方式。
 那么，Raku 编译器实际上是一个不同程序的堆栈。
   下层被运行字节码汇编的虚拟机所占据。Raku 并不致力于单一的虚拟机，事实上目前有三个虚拟机可用。MoarVM、JavaScript 虚拟机和 JVM。一般来说，MoarVM 是参考虚拟机，除非另有说明，否则本书将使用 MoarVM。
  下一层由 NQP（Not Quite Perl 的缩写，意思是 Not Quite Perl，也可能是完全不同的语言）占据，NQP 是一种简化的语言，它通过翻译成 Java 或 MoarVM 字节码来生成字节码。</description>
    </item>
    
    <item>
      <title>Raku 单行程序</title>
      <link>https://ohmyraku.github.io/raku-one-liners/</link>
      <pubDate>Fri, 12 Jun 2020 13:16:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-one-liners/</guid>
      <description>1. 命令行选项 1.1. 使用命令行选项 我们来谈谈 Rakudo[1] 编译器为我们提供的命令行选项。
 1.1.1. -e 在使用 Raku 时要知道的第一个选项是 -e。它接收一个带有 Raku 单行程序的字符串，并立即执行。
 例如，打印当前用户的名字:
 $ raku -e&amp;#39;say $*USER&amp;#39; ash    1.1.2. -n 这个选项会重复每一行输入数据的代码。当你想处理一个文件时，这是很方便的。例如，这里有一个单行程序，它将每行中的值相加并打印出总和:
 $ raku -ne&amp;#39;say [+] .split(&amp;#34; &amp;#34;)&amp;#39; data.txt   如果 data.txt 文件包含以下内容：
 10 20 30 40 1 2 3 4 5 6 7 8   那么这个单行程序的结果就是:
 100 10 26   是否使用 shell 的输入重定向没有区别，下面这行也是可以的:
 $ raku -ne&amp;#39;say [+] .</description>
    </item>
    
    <item>
      <title>用 Raku 写编译器</title>
      <link>https://ohmyraku.github.io/creating-a-compiler-with-raku/</link>
      <pubDate>Mon, 24 Feb 2020 12:54:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/creating-a-compiler-with-raku/</guid>
      <description>1. 第一章 创建一个简单的解释器 这是使用 Raku 创建编译器的一章。
 让我们从一个简单的解释器程序开始研究 Raku 强大的 grammar 和正则表达式，该程序可以解析并执行以下微型程序。 我将这种语言称为 Lingua。
 #!/usr/bin/env raku my x; x = 42; say x;   在理解此代码的含义时，你不会遇到任何问题，因为故意选择了类似于 Raku 本身的语法的语法，只是在变量名前没有任何符号。
 该程序声明一个名为 x 的变量，为其赋一个整数值，然后将该值打印到控制台。
 假设你将代码保存在文件 test.lng 中。 现在让我们使用 Raku 读取它。
 #!/usr/bin/env raku my $code = &amp;#39;test.lng&amp;#39;.IO.slurp(); say $code;   将此 Raku 程序保存在另一个文件 lingua.raku 中，然后运行它：
 $ raku lingua.raku   如果你安装了 Raku，则会打印出我们测试程序的内容。
 1.1. Grammar 现在是时候使用 Raku grammar 解析程序了。 从语法上讲，grammar 是类，但是它们使用正则表达式描述其方法的行为，这些方法又称为 rule 和 token。 第一个应用的 rule 通常称为 TOP; Raku 选择它为默认开始规则。 Grammar 用于解析某些文本，因此只需对已定义的 grammar 调用 parse 方法并将文本传递给它即可。 所有这些都在我们的第一个程序中得到了证明：</description>
    </item>
    
    <item>
      <title>Cro 入门</title>
      <link>https://ohmyraku.github.io/cro/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/cro/</guid>
      <description>1. Cro 开发工具 Cro包含帮助开发人员更有效地工作的工具。 当前，这些工具可通过命令行界面使用。 将来还将添加Web界面。 没有这些工具，完全有可能使用Cro。 它们旨在提供一些合理的默认值，但并不适合每个项目。
 1.1. 存根服务 可以使用cro stub命令对新服务进行存根。 一般用法是：
 #!/usr/bin/env raku cro stub &amp;lt;service-type&amp;gt; &amp;lt;service-id&amp;gt; &amp;lt;path&amp;gt; [&amp;#39;links-and-options&amp;#39;]   其中
 service-type是要创建的服务的类型 service-id是服务的ID（与其他cro命令一起使用；也将在.cro.yml中用作服务的默认描述性名称）
 路径是创建服务的位置 links-and-options指定指向应添加到存根的其他服务的链接，以及特定于服务类型的选项
 如果未指定链接和选项，则将以交互方式请求它们。 要提供选项，请使用类似于Perl 6冒号对的语法将其放在引号中，其中：foo启用选项，：！foo禁用选项，而：foo &amp;lt;bar&amp;gt;是带有值bar的选项foo。 例如：
 #!/usr/bin/env raku cro stub http foo services/foo &amp;#39;:!secure :websocket&amp;#39; cro stub http bar services/bar &amp;#39;:!secure :websocket&amp;#39;   已存根的服务从环境变量获取端口和证书配置，并且当服务之间存在关系时，其地址也将使用环境变量注入。 设置容器部署时，这很方便。
 链接导致存根服务包含创建可以与另一个端点通信的“客户端”的代码。 这些与选项一起使用，格式为：link &amp;lt;service-id：endpoint-id&amp;gt;。 service-id是目标.cro.yml的id字段，endpoint-id是该.cro.yml文件的终结点列表中条目的id字段。
 #!/usr/bin/env raku cro stub http foo services/foo &amp;#39;:link&amp;lt;flash-storage:http&amp;gt;&amp;#39;    1.</description>
    </item>
    
    <item>
      <title>Raku Advent Calendar</title>
      <link>https://ohmyraku.github.io/raku-advent-calendar/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-advent-calendar/</guid>
      <description>1. 第一天 – Raku 鬼精灵: 圣诞节实用指南 看看他们！同事、朋友和亲近的家人都在开心地笑着。他们都在享受着使用 Raku 的 6.c “圣诞”版编程的乐趣。给力的并发原语, 核心文法, 还有非常棒的对象模型。它让我印象深刻！
 但是等一下…​ 就一秒。我有个想法。一个可怕的想法。我想到了一个鬼主意! 我们可以在他们的&amp;#34;圣诞&amp;#34;上捣乱。需要的只有一点花招。哈哈哈哈哈哈！！
 欢迎来到 2017 年的 Raku 圣诞日历！每天，从今天直到圣诞节，我们都会有一篇很赞的关于 Raku 的博客推送到你面前。
 今天，我们会展示我们淘气的一面并且故意地做些淘气的事情。确实，这有点用，但是淘气点更快乐。我们开始吧！
 1.1. But True does False 你听过 but 操作符吗？一个好玩的东西：
 say True but False ?? &amp;#39;Tis true&amp;#39; !! &amp;#39;Tis false&amp;#39;; # OUTPUT: «Tis false␤» my $n = 42 but &amp;#39;forty two&amp;#39;; say $n; # OUTPUT: «forty two␤» say $n + 7; # OUTPUT: «49␤»   它是一个中缀操作符，它首先拷贝它左边的对象，然后把它右边提供的 role 混进这个拷贝中：</description>
    </item>
    
    <item>
      <title>Raku at a glance</title>
      <link>https://ohmyraku.github.io/raku-at-a-glance/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-at-a-glance/</guid>
      <description>1. Raku 概要 1.1. Hello, World Raku编译器可以从文件或+ e命令行开关的内容中读取程序。 最简单的“Hello，World！”程序如下所示：
 #!/usr/bin/env raku say &amp;#34;Hello, Raku &amp;#34;;   把它保存到文件中并运行:
 $ raku hello.pl Hello, Raku   或者，你可以使用 +e 选项：
 #!/usr/bin/env raku $ raku -e&amp;#39;say &amp;#34;Hello, Raku&amp;#34;&amp;#39; Hello, Raku    1.2. 变量 1.2.1. 符号 Raku使用符号来标记变量。 这些符号部分兼容 使用Perl 5语法。 例如，标量，列表和散列分别使用$，@和％sigils。
 #!/usr/bin/env raku my $scalar = 42; say $scalar;   代码打印42并不奇怪。
 考虑以下片段，它也给出了可预测的结果（方括号表示一个数组）：
 #!/usr/bin/env raku my @array = (10, 20, 30); say @array; # [10 20 30]   现在，让我们使用Raku的优点并重写上面的代码，使用更少的输入，更少的字符和更少的标点符号：</description>
    </item>
    
    <item>
      <title>Raku 入门</title>
      <link>https://ohmyraku.github.io/raku-guide/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-guide/</guid>
      <description>本文档旨在为你提供 Raku 编程语言的快速概述。 它可以让 Raku 初学者快速上手。
 本文档的一部分章节涉及 Raku 文档的其他（更完整和准确）部分。 如果你需要有关特定主题的更多信息，你应该阅读它们。
 在本文档中，你会找到大部分所讨论主题的示例。 为了更好地理解它们，请花时间再现所有的例子。
 许可证 本工作根据知识共享署名 - 授权4.0国际许可协议进行许可。 要查看此许可证的副本，请访问
   https://creativecommons.org/licenses/by-sa/4.0/.
   贡献 如果你想对此文档做贡献，请访问：
   https://github.com/hankache/rakuguide
   意见反馈 欢迎所有的反馈： naoum@hankache.com
 如果你喜欢这个工作， 欢迎在 Github 给这个仓库点赞。
 翻译   保加利亚语: https://raku.guide/bg
  中文: https://raku.guide/zh
  荷兰语: https://raku.guide/nl
  法语: https://raku.guide/fr
  德语: https://raku.guide/de
  印度尼西亚语: https://raku.</description>
    </item>
    
    <item>
      <title>Raku 基础</title>
      <link>https://ohmyraku.github.io/raku-by-example/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-by-example/</guid>
      <description>1. 什么是 Raku Raku 是一种编程语言。它以自然语言为灵感，设计成易学、易读、易写的语言。它让初学者可以编写 &amp;#34;婴儿Perl&amp;#34;，同时也让有经验的程序员可以自由表达，从简练到诗意。
 Raku 是渐近类型的。它主要遵循了动态类型化语言的范式，即接受那些在编译过程中无法保证类型安全的程序。然而，与许多动态语言不同的是，它接受并执行类型约束。在可能的情况下，编译器使用类型注解来在编译时做出决定，否则只有在运行时才有可能。
 许多编程范式都影响了 Raku 。你可以在 Raku 中编写命令式、面向对象和函数式的程序。声明式编程的功能，如多重分派、子类型、regex 和 grammar 引擎等，都支持声明式编程。
 在 Raku 中，大部分的查询都是词法查询，而且语言避免了全局状态。这使得程序的并行和并发执行更加容易，Raku 对高级并发原语的关注也是如此。当你不希望被限制在一个 CPU 内核上时，你会考虑 Promise 和消息队列, 而不是考虑线程和锁。
 Raku 作为一门语言，对于 Raku 程序应该被编译还是被解释的问题，Raku 是没有主见的。Raku 作为一种主要的实现, 可以快速编译模块并解释脚本。
 1.1. Perl5, 老天鹅 在 2000 年左右，Perl 5 的发展面临着巨大的压力，面临着既要发展又要保持向后兼容的矛盾。
 Raku 是释放这种压力的阀门。所有需要打破向后兼容性的扩展建议都被引导到了 Raku 中，使其处于梦幻般的状态，一切皆有可能，没有任何东西是固定的。经过几年的努力，Raku 才进入了一个比较稳固的状态。
 在这段时间里，Perl 5 也在不断发展，这两种语言的差异性足够大，以至于大多数 Perl 5 的开发者不再认为 Raku 是一条自然的升级之路，以至于 Raku 并没有试图让 Perl 5 过时（至少不会比它试图让任何其他编程语言过时的程度更高：-），2015 年第一次稳定发布的 Raku 并没有表明对 Perl 5 的支持失效。</description>
    </item>
    
    <item>
      <title>Raku 学习手册</title>
      <link>https://ohmyraku.github.io/learning-raku/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/learning-raku/</guid>
      <description>1. 介绍 本章是该语言的全貌图; 如果你还不了解正在发生的一切，请不要担心。担心如果你到了本书的最后，你仍然没有了解全部！有讲很多东西，所以将围绕一些话题，重新审视其他话题，并通过一些练习看看它们是如何融合在一起的 - 这真的都是关于实践的。
 1.1. 为什么是 Raku? 对于初学者，你要学习 Raku。你也可能通过使用这种语言来使得物有所值！
 但是什么使这种语言变得有吸引力？ Perl 家族一直喜欢 DWIM-Do What I Mean。你经常做的事情应该很容易做，而最困难的事情应该是可能的。任何编程语言的用处都可以通过它解决问题的程度来衡量。
 Raku 是一种出色的文本处理语言 - 甚至可能比 Perl 5 更好。正则表达式（第15章）有许多令人兴奋的新功能，可以更容易地匹配和提取文本。内置 grammar（第17章）功能允许你轻松编写复杂的规则来处理和响应文本。
 渐进类型（第3章）允许你注释变量，并限制你可以存储的内容。例如，你可以指定数字必须是整数，正数或两个其他数字之间的数。你不必必须使用它（这是渐进的部分）。你将能够注释子例程接受什么以及它应该返回什么。这可以快速揭示数据边界的错误。
 内置并发（第18章）功能允许你将问题分解为单独运行并可能同时运行的部分。该语言为你处理大部分内容。
 惰性列表和无限列表允许你处理序列而无需过多复制或甚至一次拥有整个列表（第6章）。你可以轻松创建自己的无限惰性列表。
 我可以继续前进，但是当你按照本书的方式工作时，你会遇到更多令人惊叹的功能。
 有时你不想使用 Raku。没有语言能适用所有的工作。如果你更喜欢其他更好的东西，或者可以使用不同的工具更快地完成任务，那么对你来说更强大！但是，我希望本书可以帮助你在 Raku 中快速有效地完成你需要做的事情。
  1.2. First Steps with the REPL REPL 是一个 Read-Evaluate-Print-Loop 的工具，提供交互式提示。 REPL 计算你键入的代码，显示结果，然后再次提示你。这是尝试代码片段的快速方法。当你运行不带参数的 raku 时，它会启动它的 REPL：
 % raku To exit type &amp;#39;exit&amp;#39; or &amp;#39;^D&amp;#39; &amp;gt;   &amp;gt; 是等待你输入内容的提示。当你键入 Return 时，REPL 开始工作。通过使两个数字相加来尝试 REPL：</description>
    </item>
    
    <item>
      <title>Raku 官方文档</title>
      <link>https://ohmyraku.github.io/rakudoc/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/rakudoc/</guid>
      <description>1. 通过例子学习 Raku 假设你举办了一场乒乓球锦标赛。裁判员以 Player1 Player2 | 3:2 的格式告诉你每场比赛的结果, 这意味着 Player1 以 3:2 的比分战胜了 Player2。你需要一个脚本来总结每个选手赢了多少场比赛和多少局, 以确定总冠军。
 输入数据（存储在一个名为 scores.txt 的文件中）如下所示：
 Beth Ana Charlie Dave Ana Dave | 3:0 Charlie Beth | 3:1 Ana Beth | 2:3 Dave Charlie | 3:0 Ana Charlie | 3:1 Beth Dave | 0:3   第一行是选手名单。之后的每一行都记录了一场比赛的结果。
 在 Raku 中, 有一种方法可以解决这个问题。
 #!/usr/bin/env raku use v6; # start by printing out the header. say &amp;#34;Tournament Results:\n&amp;#34;; my $file = open &amp;#39;scores.</description>
    </item>
    
    <item>
      <title>Raku 手册</title>
      <link>https://ohmyraku.github.io/begining-raku/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/begining-raku/</guid>
      <description>1. 关于 Raku Raku 以前被称为 Perl 6，因此你会在转换完全完成之前的相当一段时间内看到该名称。
 1.1. Rakudo Rakudo 是用 NQP(«Not Quite Perl»)编写的 Raku 的生产就绪型实现，在专用的 MoarVM(&amp;#34;运行时的元模型&amp;#34;)虚拟机上运行。
 MoarVM 可用于 Windows，MacOS 和 Linux(以及某些其他操作系统)。
 Rakudo 每月发布一次。(或者至少打算拥有它们。)
 在 jvm 和 javascript(node.js)上运行的 Rakudo 的实现还不完整。
 1.1.1. Rakudo Star Rakudo Star 每三个月发布一次。 Rakudo 捆绑了文档(p6doc 命令，请参见第 1.8 节, &amp;#34;文档&amp;#34;)和一些有用的模块（尤其是模块安装程序 zef; 请参见第 12.2 节&amp;#34;使用 zef 进行模块管理”)。
 这是安装 Rakudo 的最简单方法。
 如果你正在运行 Linux 或 MacOS，则可以选择使用 Docker 和 Rakudo 镜像。 在决定之前参考附录1.Docker。
  1.</description>
    </item>
    
    <item>
      <title>Raku 深入研究</title>
      <link>https://ohmyraku.github.io/raku-deep-dive/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-deep-dive/</guid>
      <description>1. 什么是 Raku 在这一章中，我们将研究 Raku 出现的原因，并跟踪了解 Perl 语言的发展历史。你会看到一些自 Perl 5 以来发生的变化，你会看到一些例子，你会学习如何下载和使用编译器，在哪里找到文档，以及如何在 Raku 中运行你的第一个程序。
 在这一章中，我们将介绍以下内容:
   Raku 的起源
  与 Perl 5 的区别
  Raku 资源
  编译器
  使用 Rakudo Star
  编写我们的 Hello World 程序
   1.1. Raku 起源 Raku 是 Perl 家族中的一种编程语言。Perl 本身出现于 1987 年，从那时起，它就在不断发展：目前的稳定版本是 2017年5月发布的5.26。2000年，Perl 的创造者 Larry Wall 提出要开始研究该语言的下一个版本- Raku 。
 这有几个原因。首先，一种语言应该继续发展，以反映开发者的新要求。第二，它可能会改变非 Perl 社区对 Perl 的看法。5.</description>
    </item>
    
    <item>
      <title>Raku 语法小册</title>
      <link>https://ohmyraku.github.io/raku-quick-syntax-reference/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/raku-quick-syntax-reference/</guid>
      <description>1. 运行 Raku  如何安装 Raku 或只是准备好运行你的脚本或程序
   Raku 是一种编程语言，因此它是包含一系列应用程序的开发生态系统的一部分。 在本书中将使用其中的一些内容，因此在进入 Raku 本身之前，你可能需要安装以下内容。
   Git 是主流的源代码控制和开发工作流工具。 你可能需要它来下载一些 Raku 模块，或者以某种方式从源代码安装它。
  编程语言编辑器。 Raku 具有自己的集成开发环境（IDE），称为 Comma，你可以从 Edument 获得其许可证。 社区版于 2019 年 3 月发布。 该 IDE 包含你希望获得的大多数好处，包括语法高亮显示，程序运行和文档预览。 在其余的编辑器中，Atom 的支持可能是最好的，包括高亮显示和语法检查。 其他编辑器，例如 Emacs，VS Code 和 vim，也支持 Raku，如果你已经熟悉它们，可能就足够了。
  Docker 是一个服务隔离框架，如今已广泛用于软件包分发。安装它可以帮助你避免把东西永久地安装在系统上。你还可以通过使用特定应用程序的名称来使其快速运行。
  在 Raku 的世界中，很多动作都发生在互联网中继通道中。尽管你可以从浏览器访问其中的一些，但是拥有自己的 IRC 桌面客户端将通过无缝身份验证和自动化实现你的入口。 你还将从命令行运行一些脚本。对它的工作原理以及如何在不同的操作系统中使用它的基本理解总是有帮助的。由于你要安装 Raku 以及其他附带的东西，因此对 apt 等打包系统（默认情况下将使用 Debian 和 Ubuntu 打包系统）以及 Windows 的 Chocolatey/NuGet 或 Mac 的 Brew 将派上用场。</description>
    </item>
    
    <item>
      <title>使用 Raku</title>
      <link>https://ohmyraku.github.io/using-raku/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/using-raku/</guid>
      <description>字符串 1. 1.1 使用字符串 1.1. 1. 你好, 世界! #!/usr/bin/env raku print &amp;#39;Hello, World!&amp;#39;   有两个内置函数可打印到控制台：print 和 say。 两者都打印其参数，但是 say 例程另外以换行符结束输出。
 因此，最快的解决方案是使用 say 并传递不带换行符的字符串：
 #!/usr/bin/env raku say &amp;#39;Hello, World!&amp;#39;   另一种解决方案是使用 print 并在字符串本身中包含 \n 字符：
 #!/usr/bin/env raku print &amp;#34;Hello, World!\n&amp;#34;   两个程序的输出是一样的：
 Hello, World!
 注意单引号和双引号之间的区别：单引号不会插入 \n 等特殊字符，而双引号会插入。 对于不带特殊字符的字符串使用双引号是没有错的，但是当你不希望在字符串中使用变量并且不需要插值变量时，最好使用适当的引号样式。
 在上面的示例中要看的另一件事是，单行程序不需要分号。
  1.2. 2. 跟人打招呼  询问用户的名字，并通过打印&amp;#34;你好, &amp;lt;名字&amp;gt;!&amp;#34; 来打招呼。
   Raku 提供了一个简单的 prompt 函数，该函数执行两种操作：打印提示并读取输入。 因此，使用它的程序可能如下所示：</description>
    </item>
    
    <item>
      <title>使用 Raku 正则表达式和 Grammars 进行解析</title>
      <link>https://ohmyraku.github.io/parsing-with-raku-regexes-and-grammars/</link>
      <pubDate>Wed, 05 Feb 2020 15:26:52 +0800</pubDate>
      <author>ohmyraku@outlook.com (ohmyraku)</author>
      <guid>https://ohmyraku.github.io/parsing-with-raku-regexes-and-grammars/</guid>
      <description>1. 什么是正则表达式和 Grammar？ 我们会接触到各种各样的结构化数据: 电话号码、电子邮件地址、邮政地址、信用卡号码等等。
 正则表达式是一种声明性的编程结构, 用来描述这些数据格式。正则表达式可以让你搜索数据, 确保输入的数据确实是真实的格式, 甚至可以提取相关的组件, 如邮政地址的邮政编码, 或日志文件条目中的时间戳。
 当你需要读取和验证更复杂的结构时, 比如程序设计语言, 或者像 XML 这样的标记语言, 你可以把多个正则表达式组合成 grammar。Grammar 的作用不仅仅是简单地组合正则表达式。它们还提供生成良好的错误信息和在分析输入文本时跟踪状态的基础设施。
 1.1. 使用场景 1.1.1. 搜索 正则表达式的一个常见用途是在大量数据中搜索感兴趣的模式, 例如在日志文件中查找某些消息, 在 URL 中查找特定的信息, 或者在文本中查找电话号码。在写这篇文章的时候, 我的 .bash_history 中大约有 6% 的条目涉及到使用正则表达式进行搜索。
   许多命令行工具都支持某些正则表达式方言, 允许你搜索文件名、文件内容、日志、捕获的网络流量以及几乎所有你能想到的东西。大多数现代编程语言也可以很容易地使用正则表达式, 使其成为一种无处不在、不可或缺的搜索工具。
  1.1.2. 验证 大多数应用程序都面临着不可信的用户输入。特别是 Web 应用程序面临着大量的不可信输入。这些输入必须在应用任何进一步的逻辑或将其存储在例如数据库中之前进行验证。
 正则表达式是验证的第一步。他们使检查数字等简单的事情变得简单, 并验证输入的最小长度和最大长度。同时, 它们允许程序员进行更精确、更复杂的检查。
 Web 应用程序员只需要提供一个正则表达式, 并将其与输入字段关联。然后, Web 框架可以根据所有已配置的正则表达式来验证表单输入, 并自动为终端用户生成错误信息, 这样 Web 应用程序员就不需要处理拒绝输入和重新生成表单的工作流程。
  1.1.3. 解析 单独使用正则表达式不太适合解析复杂的输入数据。然而, Raku 添加了功能, 使其非常适合这项任务。这些扩展包括易于使用的回溯控制和通过命名正则表达式获得的可组合性。</description>
    </item>
    
  </channel>
</rss>
